#!/bin/bash
# ABOUTME: VPN connection establishment and profile management for Artix/Arch Linux  
# ABOUTME: Handles server selection, connection attempts, and performance testing

VPN_DIR="$(dirname "$(realpath "$0")")"
LOCATIONS_DIR="$VPN_DIR/locations"
CREDENTIALS_FILE="$VPN_DIR/credentials.txt"
PERFORMANCE_CACHE="/tmp/vpn_performance.cache"
CONNECTION_LOG="/tmp/vpn_connect.log"
LOCK_FILE="/tmp/vpn_connect.lock"

log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$CONNECTION_LOG"
}

check_internet() {
    if ping -c 1 -W 5 8.8.8.8 >/dev/null 2>&1; then
        return 0
    else
        echo -e "\033[1;31mError: No internet connection detected\033[0m"
        return 1
    fi
}

check_dependencies() {
    local missing_deps=()
    
    command -v openvpn >/dev/null || missing_deps+=("openvpn")
    command -v curl >/dev/null || missing_deps+=("curl")
    command -v bc >/dev/null || missing_deps+=("bc")
    command -v notify-send >/dev/null || missing_deps+=("libnotify")
    command -v ip >/dev/null || missing_deps+=("iproute2")
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo -e "\033[1;31mError: Missing dependencies: ${missing_deps[*]}\033[0m"
        echo "Install with: sudo pacman -S ${missing_deps[*]}"
        return 1
    fi
    
    return 0
}

acquire_lock() {
    if [[ -f "$LOCK_FILE" ]]; then
        local lock_pid
        lock_pid=$(cat "$LOCK_FILE" 2>/dev/null)
        if [[ -n "$lock_pid" ]] && kill -0 "$lock_pid" 2>/dev/null; then
            echo -e "\033[1;33mAnother VPN connection is already in progress (PID: $lock_pid)\033[0m"
            return 1
        else
            rm -f "$LOCK_FILE"
        fi
    fi
    
    echo $$ > "$LOCK_FILE"
    return 0
}

release_lock() {
    [[ -f "$LOCK_FILE" ]] && rm -f "$LOCK_FILE"
}

cleanup_on_exit() {
    release_lock
}

trap cleanup_on_exit EXIT

list_profiles() {
    if [[ ! -d "$LOCATIONS_DIR" ]]; then
        echo -e "\033[1;31mError: Locations directory not found: $LOCATIONS_DIR\033[0m"
        return 1
    fi
    
    local profiles
    profiles=$(find "$LOCATIONS_DIR" -name "*.ovpn" 2>/dev/null | sort)
    
    if [[ -z "$profiles" ]]; then
        echo -e "\033[1;33mNo VPN profiles found in $LOCATIONS_DIR\033[0m"
        echo "Please download .ovpn files from your VPN provider"
        return 1
    fi
    
    echo -e "\033[1;36mAvailable VPN Profiles:\033[0m"
    while IFS= read -r profile; do
        local name
        name=$(basename "$profile" .ovpn)
        echo "  $name"
    done <<< "$profiles"
    
    return 0
}

find_profiles_by_country() {
    local country_code="$1"
    
    if [[ -z "$country_code" ]]; then
        find "$LOCATIONS_DIR" -name "*.ovpn" 2>/dev/null | sort
        return
    fi
    
    country_code=$(echo "$country_code" | tr '[:upper:]' '[:lower:]')
    local results
    
    # Try lowercase first (se-*.ovpn)
    results=$(find "$LOCATIONS_DIR" -name "${country_code}-*.ovpn" 2>/dev/null)
    
    # If no results, try uppercase (SE*.ovpn or *SE*.ovpn)
    if [[ -z "$results" ]]; then
        country_code=$(echo "$country_code" | tr '[:lower:]' '[:upper:]')
        results=$(find "$LOCATIONS_DIR" -name "*${country_code}*.ovpn" 2>/dev/null)
    fi
    
    echo "$results" | sort
}

test_server_latency() {
    local server_ip="$1"
    local timeout=5
    
    if [[ -z "$server_ip" ]]; then
        return 1
    fi
    
    local ping_result
    ping_result=$(ping -c 3 -W $timeout "$server_ip" 2>/dev/null | grep "avg" | awk -F '/' '{print $5}')
    
    if [[ -n "$ping_result" ]]; then
        echo "$ping_result"
        return 0
    else
        echo "999"
        return 1
    fi
}

connect_to_profile() {
    local profile_path="$1"
    local max_attempts=3
    
    if [[ ! -f "$profile_path" ]]; then
        echo -e "\033[1;31mError: Profile not found: $profile_path\033[0m"
        return 1
    fi
    
    if [[ ! -f "$CREDENTIALS_FILE" ]]; then
        echo -e "\033[1;31mError: Credentials file not found: $CREDENTIALS_FILE\033[0m"
        echo "Create it with your VPN username and password (one per line)"
        return 1
    fi
    
    local profile_name
    profile_name=$(basename "$profile_path" .ovpn)
    
    echo -e "\033[1;33mConnecting to $profile_name...\033[0m"
    log_message "Attempting connection to $profile_name"
    
    "$VPN_DIR/vpn-manager" stop >/dev/null 2>&1
    sleep 2
    
    for attempt in $(seq 1 $max_attempts); do
        echo "  Attempt $attempt of $max_attempts"
        
        notify-send "VPN Connector" "Connecting to $profile_name (attempt $attempt)" --icon=network-vpn 2>/dev/null || true
        
        timeout 30 sudo openvpn \
            --config "$profile_path" \
            --auth-user-pass "$CREDENTIALS_FILE" \
            --daemon \
            --writepid /var/run/openvpn.pid \
            --log /tmp/openvpn.log \
            --verb 3
        
        sleep 10
        
        if "$VPN_DIR/vpn-manager" status | grep -q "CONNECTED"; then
            echo -e "\033[1;32m✓ Successfully connected to $profile_name\033[0m"
            log_message "Successfully connected to $profile_name on attempt $attempt"
            
            notify-send "VPN Connector" "Connected to $profile_name" --icon=network-vpn 2>/dev/null || true
            
            pkill -RTMIN+4 dwmblocks 2>/dev/null || true
            
            return 0
        fi
        
        echo -e "\033[1;33m  Connection attempt $attempt failed\033[0m"
        log_message "Connection attempt $attempt failed for $profile_name"
        
        if [[ $attempt -lt $max_attempts ]]; then
            echo "  Waiting before retry..."
            sleep 5
        fi
    done
    
    echo -e "\033[1;31m✗ Failed to connect to $profile_name after $max_attempts attempts\033[0m"
    log_message "Failed to connect to $profile_name after $max_attempts attempts"
    
    notify-send "VPN Connector" "Failed to connect to $profile_name" --icon=dialog-error 2>/dev/null || true
    
    return 1
}

connect_random() {
    local country_code="$1"
    
    local profiles
    profiles=$(find_profiles_by_country "$country_code")
    
    if [[ -z "$profiles" ]]; then
        if [[ -n "$country_code" ]]; then
            echo -e "\033[1;31mNo profiles found for country: $country_code\033[0m"
        else
            echo -e "\033[1;31mNo VPN profiles available\033[0m"
        fi
        return 1
    fi
    
    local profile_array=()
    while IFS= read -r profile; do
        profile_array+=("$profile")
    done <<< "$profiles"
    
    local random_index=$((RANDOM % ${#profile_array[@]}))
    local selected_profile="${profile_array[$random_index]}"
    
    echo -e "\033[1;36mSelected profile: $(basename "$selected_profile" .ovpn)\033[0m"
    
    connect_to_profile "$selected_profile"
}

best_server_connect() {
    echo -e "\033[1;36m╔════════════════════════════════════════╗\033[0m"
    echo -e "\033[1;36m║         Finding Best VPN Server        ║\033[0m"  
    echo -e "\033[1;36m╚════════════════════════════════════════╝\033[0m"
    echo
    
    if ! check_internet; then
        return 1
    fi
    
    local profiles
    profiles=$(find_profiles_by_country "")
    
    if [[ -z "$profiles" ]]; then
        echo -e "\033[1;31mNo VPN profiles available for testing\033[0m"
        return 1
    fi
    
    echo -e "\033[1;33mTesting available servers...\033[0m"
    
    local best_profile=""
    local best_latency=999
    local test_count=0
    local max_tests=8
    
    while IFS= read -r profile && [[ $test_count -lt $max_tests ]]; do
        local profile_name
        profile_name=$(basename "$profile" .ovpn)
        
        echo -n "  Testing $profile_name... "
        
        local server_ip
        server_ip=$(grep -m1 "^remote " "$profile" | awk '{print $2}')
        
        if [[ -n "$server_ip" ]]; then
            local latency
            latency=$(test_server_latency "$server_ip")
            
            echo "${latency}ms"
            
            if (( $(echo "$latency < $best_latency" | bc -l) )); then
                best_latency="$latency"
                best_profile="$profile"
            fi
        else
            echo "Unable to extract server IP"
        fi
        
        ((test_count++))
        
    done <<< "$profiles"
    
    if [[ -n "$best_profile" ]]; then
        echo
        echo -e "\033[1;32mBest server found: $(basename "$best_profile" .ovpn) (${best_latency}ms)\033[0m"
        echo
        connect_to_profile "$best_profile"
    else
        echo -e "\033[1;31mNo suitable server found\033[0m"
        return 1
    fi
}

case "$1" in
    "connect"|"c")
        if ! check_dependencies; then
            exit 1
        fi
        
        if ! acquire_lock; then
            exit 1
        fi
        
        connect_random "$2"
        ;;
    "best"|"b")
        if ! check_dependencies; then
            exit 1
        fi
        
        if ! acquire_lock; then
            exit 1
        fi
        
        best_server_connect
        ;;
    "fast"|"f")
        if ! check_dependencies; then
            exit 1
        fi
        
        if ! acquire_lock; then
            exit 1
        fi
        
        echo -e "\033[1;33mFast connect mode (using cached results if available)\033[0m"
        connect_random "$2"
        ;;
    "secure")
        if ! check_dependencies; then
            exit 1
        fi
        
        if ! acquire_lock; then
            exit 1
        fi
        
        echo -e "\033[1;33mSecure core connection not yet implemented\033[0m"
        echo "Using regular connection for now"
        connect_random
        ;;
    "list"|"l")
        list_profiles
        ;;
    "test"|"t")
        if ! check_dependencies; then
            echo -e "\033[1;31mDependency check failed\033[0m"
            exit 1
        fi
        
        if ! check_internet; then
            echo -e "\033[1;31mInternet connectivity test failed\033[0m"
            exit 1
        fi
        
        if [[ ! -f "$CREDENTIALS_FILE" ]]; then
            echo -e "\033[1;31mCredentials file missing: $CREDENTIALS_FILE\033[0m"
            exit 1
        fi
        
        if ! list_profiles >/dev/null; then
            echo -e "\033[1;31mNo VPN profiles available\033[0m"
            exit 1
        fi
        
        echo -e "\033[1;32m✓ All VPN connector tests passed\033[0m"
        ;;
    *)
        echo "VPN Connector - Connection Management"
        echo "Usage: $0 {connect|best|fast|secure|list|test} [country]"
        echo ""
        echo "Commands:"
        echo "  connect [country] - Connect to random server (optional country filter)"
        echo "  best              - Connect to best performing server"
        echo "  fast [country]    - Quick connect using cached results"
        echo "  secure            - Connect to secure core server"
        echo "  list              - List available VPN profiles"  
        echo "  test              - Test VPN connector functionality"
        echo ""
        echo "Examples:"
        echo "  $0 connect se     - Connect to Swedish server"
        echo "  $0 best           - Connect to best server"
        echo "  $0 fast nl        - Fast connect to Netherlands"
        exit 1
        ;;
esac