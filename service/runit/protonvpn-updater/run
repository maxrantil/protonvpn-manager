#!/bin/sh
# ABOUTME: ProtonVPN Config Updater - Runit service for automated config downloads

# Service configuration
SERVICE_NAME="protonvpn-updater"
VPN_ROOT="/home/mqx/workspace/claude-code/vpn"
UPDATE_INTERVAL=3600  # 1 hour default
LOG_DIR="/var/log/protonvpn"
PID_FILE="/run/protonvpn-updater.pid"

# Ensure directories exist
[ ! -d "$LOG_DIR" ] && mkdir -p "$LOG_DIR"
[ ! -d "$(dirname "$PID_FILE")" ] && mkdir -p "$(dirname "$PID_FILE")"

# Change to VPN directory
cd "$VPN_ROOT" || exit 1

# Check dependencies
if ! command -v "$VPN_ROOT/src/download-engine" >/dev/null 2>&1; then
    echo "ERROR: download-engine not found at $VPN_ROOT/src/download-engine" >&2
    exit 1
fi

# Log startup
echo "$(date): ProtonVPN Config Updater starting (PID: $$, interval: ${UPDATE_INTERVAL}s)" >&2

# Store PID
echo $$ > "$PID_FILE"

# Cleanup on exit
cleanup() {
    echo "$(date): ProtonVPN Config Updater stopping (PID: $$)" >&2
    rm -f "$PID_FILE"
    exit 0
}
trap cleanup TERM INT

# Main service loop
while true; do
    echo "$(date): Starting config update check..." >&2

    # Check if authentication is available
    if "$VPN_ROOT/src/proton-auth" status >/dev/null 2>&1; then
        echo "$(date): Authentication available, checking for config updates..." >&2

        # Run update check (will use real download if authenticated)
        if "$VPN_ROOT/src/download-engine" status; then
            echo "$(date): Config update check completed successfully" >&2
        else
            echo "$(date): Config update check failed (exit code: $?)" >&2
        fi
    else
        echo "$(date): No authentication available, skipping update check" >&2
    fi

    # Sleep for configured interval
    echo "$(date): Sleeping for ${UPDATE_INTERVAL} seconds..." >&2
    sleep "$UPDATE_INTERVAL" &
    wait $!  # Wait for sleep to complete (allows signal handling)
done
