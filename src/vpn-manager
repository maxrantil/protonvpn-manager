#!/bin/bash
# ABOUTME: VPN process and connection management script for Artix/Arch Linux
# ABOUTME: Handles OpenVPN process lifecycle, status checking, and cleanup operations

VPN_PID_FILE="/var/run/openvpn.pid"
VPN_LOG_FILE="/tmp/vpn_manager.log"
LOCK_FILE="/tmp/vpn_manager.lock"

log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$VPN_LOG_FILE"
}

get_vpn_pid() {
    local pid_from_file pid_from_process

    # First, try to find running OpenVPN process
    pid_from_process=$(pgrep -f "openvpn.*--config" 2>/dev/null | head -1)

    # If we have a PID file, check if it matches the running process
    if [[ -f "$VPN_PID_FILE" ]]; then
        pid_from_file=$(cat "$VPN_PID_FILE" 2>/dev/null)

        # If PID file matches running process, prefer it
        if [[ -n "$pid_from_file" && -n "$pid_from_process" && "$pid_from_file" == "$pid_from_process" ]]; then
            echo "$pid_from_file"
            return 0
        fi

        # If we can signal the PID from file (user has permission), use it
        if [[ -n "$pid_from_file" ]] && kill -0 "$pid_from_file" 2>/dev/null; then
            echo "$pid_from_file"
            return 0
        fi
    fi

    # Fall back to process search result
    if [[ -n "$pid_from_process" ]]; then
        echo "$pid_from_process"
        return 0
    fi

    return 1
}

is_vpn_running() {
    local pid
    pid=$(get_vpn_pid)

    if [[ -n "$pid" ]]; then
        # First try kill -0 (works if we have permission)
        if kill -0 "$pid" 2>/dev/null; then
            return 0
        fi

        # Fall back to ps check (works for any process)
        if ps -p "$pid" >/dev/null 2>&1; then
            return 0
        fi
    fi

    return 1
}

check_process_health() {
    local process_count
    process_count=$(pgrep -f "openvpn.*config" 2>/dev/null | wc -l)

    if [[ $process_count -gt 1 ]]; then
        echo -e "\033[1;31m⚠️  CRITICAL WARNING: $process_count OpenVPN processes detected!\033[0m" >&2
        echo -e "\033[1;31m⚠️  Multiple processes can cause system overheating and high CPU usage!\033[0m" >&2
        echo -e "\033[1;33m   Run './src/vpn cleanup' immediately to fix this.\033[0m" >&2
        return 1
    elif [[ $process_count -eq 1 ]]; then
        return 0
    else
        return 2  # No processes running
    fi
}

get_vpn_interface() {
    ip link show | grep -E "tun[0-9]+" | head -1 | awk '{print $2}' | sed 's/://'
}

get_vpn_gateway() {
    local interface
    interface=$(get_vpn_interface)
    if [[ -n "$interface" ]]; then
        ip route | grep "^0.0.0.0.*$interface" | awk '{print $3}' | head -1
    fi
}

show_status() {
    echo -e "\033[1;36m╔════════════════════════════════════════╗\033[0m"
    echo -e "\033[1;36m║            VPN Status Report           ║\033[0m"
    echo -e "\033[1;36m╚════════════════════════════════════════╝\033[0m"
    echo

    # Check for process health issues first
    check_process_health
    local health_status=$?

    if [[ $health_status -eq 1 ]]; then
        echo -e "\033[1;31m⚠️  PROCESS HEALTH CRITICAL - Multiple OpenVPN processes detected!\033[0m"
        echo -e "\033[1;33m   This can cause overheating and high CPU usage.\033[0m"
        echo -e "\033[1;33m   Run 'vpn cleanup' immediately to resolve.\033[0m"
        echo
    fi

    if is_vpn_running; then
        local pid interface external_ip
        pid=$(get_vpn_pid)
        interface=$(get_vpn_interface)

        echo -e "\033[1;32m✓ VPN Status: CONNECTED\033[0m"
        echo -e "  Process ID: $pid"

        if [[ -n "$interface" ]]; then
            echo -e "  Interface: $interface"
            local vpn_ip gateway
            vpn_ip=$(ip addr show "$interface" 2>/dev/null | grep "inet " | awk '{print $2}' | cut -d'/' -f1)
            gateway=$(get_vpn_gateway)

            if [[ -n "$vpn_ip" ]]; then
                echo -e "  VPN IP: $vpn_ip"
            fi
            if [[ -n "$gateway" ]]; then
                echo -e "  Gateway: $gateway"
            fi
        fi

        echo -n "  External IP: "
        external_ip=$(curl -s --max-time 5 https://ipinfo.io/ip 2>/dev/null || echo "Unable to determine")
        echo "$external_ip"

        local uptime
        uptime=$(ps -o etime= -p "$pid" 2>/dev/null | tr -d ' ')
        if [[ -n "$uptime" ]]; then
            echo -e "  Uptime: $uptime"
        fi

        notify-send "VPN Status" "Connected - IP: $external_ip" --icon=network-vpn 2>/dev/null || true
    else
        echo -e "\033[1;31m✗ VPN Status: DISCONNECTED\033[0m"

        echo -n "  External IP: "
        external_ip=$(curl -s --max-time 5 https://ipinfo.io/ip 2>/dev/null || echo "Unable to determine")
        echo "$external_ip"

        if [[ -f "$VPN_PID_FILE" ]]; then
            echo -e "\033[1;33m  Warning: Stale PID file exists\033[0m"
        fi

        notify-send "VPN Status" "Disconnected - IP: $external_ip" --icon=network-idle 2>/dev/null || true
    fi

    echo
    local active_tunnels
    active_tunnels=$(ip addr show | grep -c "tun[0-9]" 2>/dev/null || echo "0")
    echo -e "  Active tunnels: $active_tunnels"

    if [[ -f "$VPN_LOG_FILE" ]]; then
        local log_size
        log_size=$(du -h "$VPN_LOG_FILE" 2>/dev/null | cut -f1)
        echo -e "  Log file size: $log_size"
    fi
}

stop_vpn() {
    echo -e "\033[1;33mStopping VPN connection...\033[0m"
    log_message "VPN stop requested"

    if ! is_vpn_running; then
        echo -e "\033[1;33mVPN is not currently running\033[0m"
        cleanup_files
        return 0
    fi

    local pid
    pid=$(get_vpn_pid)

    if [[ -n "$pid" ]]; then
        echo "Terminating OpenVPN process (PID: $pid)"

        # Try regular kill first, then sudo if needed
        local kill_success=false
        if kill -TERM "$pid" 2>/dev/null; then
            kill_success=true
        elif sudo kill -TERM "$pid" 2>/dev/null; then
            kill_success=true
            echo "  Used sudo to terminate root process"
        fi

        if [[ "$kill_success" == "true" ]]; then
            local count=0
            # Wait for process to terminate, using ps check for root processes
            while [[ $count -lt 10 ]]; do
                if ps -p "$pid" >/dev/null 2>&1; then
                    sleep 1
                    ((count++))
                else
                    break
                fi
            done

            # If still running, try KILL signal
            if ps -p "$pid" >/dev/null 2>&1; then
                echo "Process still running, sending KILL signal"
                if ! kill -KILL "$pid" 2>/dev/null; then
                    sudo kill -KILL "$pid" 2>/dev/null || true
                fi
                sleep 2
            fi
        else
            echo -e "\033[1;31mError: Unable to send termination signal to process $pid\033[0m"
            return 1
        fi

        if is_vpn_running; then
            echo -e "\033[1;31mError: Failed to stop VPN process\033[0m"
            log_message "Failed to stop VPN process $pid"
            return 1
        else
            echo -e "\033[1;32m✓ VPN process stopped successfully\033[0m"
            log_message "VPN process $pid stopped successfully"
        fi
    fi

    cleanup_files
    cleanup_routes_light

    notify-send "VPN Manager" "VPN disconnected successfully" --icon=network-idle 2>/dev/null || true

    pkill -RTMIN+4 dwmblocks 2>/dev/null || true

    return 0
}

kill_all_vpn() {
    echo -e "\033[1;33mForce killing all VPN processes...\033[0m"
    log_message "Force kill all VPN processes requested"

    local pids
    pids=$(pgrep -f "openvpn.*config" 2>/dev/null)

    if [[ -z "$pids" ]]; then
        echo -e "\033[1;33mNo VPN processes found\033[0m"
    else
        local process_count
        process_count=$(echo "$pids" | wc -l)

        if [[ $process_count -gt 1 ]]; then
            echo -e "\033[1;31m⚠️  WARNING: Found $process_count OpenVPN processes (should be 0 or 1)\033[0m"
            echo -e "\033[1;31m⚠️  This can cause overheating and high CPU usage!\033[0m"
        fi

        echo "Killing processes: $pids"

        # Kill processes individually by PID to ensure they die
        while IFS= read -r pid; do
            if [[ -n "$pid" ]] && kill -0 "$pid" 2>/dev/null; then
                echo "  Terminating process $pid..."
                # Try TERM first
                kill -TERM "$pid" 2>/dev/null || true
                sleep 1

                # If still running, use KILL
                if kill -0 "$pid" 2>/dev/null; then
                    echo "  Force killing process $pid..."
                    kill -KILL "$pid" 2>/dev/null || true
                    sleep 1
                fi

                # If STILL running, try sudo
                if kill -0 "$pid" 2>/dev/null; then
                    echo "  Using sudo to kill process $pid..."
                    sudo kill -KILL "$pid" 2>/dev/null || true
                    sleep 1
                fi
            fi
        done <<< "$pids"

        # Final verification
        sleep 2
        local remaining_pids
        remaining_pids=$(pgrep -f "openvpn.*config" 2>/dev/null)

        if [[ -n "$remaining_pids" ]]; then
            echo -e "\033[1;31mError: Some processes still running: $remaining_pids\033[0m"
            echo -e "\033[1;31mTrying more aggressive cleanup...\033[0m"

            # Nuclear option: kill by command pattern
            sudo pkill -KILL -f "openvpn.*config.*locations" 2>/dev/null || true
            sleep 2

            # Final final check
            remaining_pids=$(pgrep -f "openvpn.*config" 2>/dev/null)
            if [[ -n "$remaining_pids" ]]; then
                echo -e "\033[1;31mCRITICAL: Processes $remaining_pids still running after aggressive cleanup!\033[0m"
                echo -e "\033[1;31mYou may need to reboot to fully clean up these processes.\033[0m"
            else
                echo -e "\033[1;32m✓ All VPN processes terminated (aggressive cleanup successful)\033[0m"
            fi
        else
            echo -e "\033[1;32m✓ All VPN processes terminated\033[0m"
        fi
    fi

    cleanup_files
    cleanup_routes_light

    notify-send "VPN Manager" "All VPN processes killed" --icon=dialog-warning 2>/dev/null || true
}

cleanup_files() {
    # Clean up PID file (may need sudo since OpenVPN creates it as root)
    if [[ -f "$VPN_PID_FILE" ]]; then
        if ! rm -f "$VPN_PID_FILE" 2>/dev/null; then
            # Try with sudo if regular removal fails
            sudo rm -f "$VPN_PID_FILE" 2>/dev/null || true
        fi
    fi

    # Clean up lock files (these should be user-writable)
    [[ -f "$LOCK_FILE" ]] && rm -f "$LOCK_FILE" 2>/dev/null
    [[ -f "/tmp/vpn_connect.lock" ]] && rm -f "/tmp/vpn_connect.lock" 2>/dev/null
}

cleanup_routes_light() {
    # Lightweight cleanup for regular disconnect - no NetworkManager restart

    # Clean up OpenVPN tunnel interfaces
    local interfaces
    interfaces=$(ip addr show | grep -E "tun[0-9]+" | awk '{print $2}' | sed 's/:$//')

    if [[ -n "$interfaces" ]]; then
        echo "Cleaning up OpenVPN tunnel interfaces..."
        while IFS= read -r interface; do
            if [[ -n "$interface" ]]; then
                echo "  Removing interface: $interface"
                sudo ip link set "$interface" down 2>/dev/null || true
                sudo ip link delete "$interface" 2>/dev/null || true
            fi
        done <<< "$interfaces"
    fi

    # NOTE: WireGuard cleanup REMOVED from lightweight cleanup
    # WireGuard operations cause DNS/network disruption due to resolvconf conflicts
    # WireGuard interfaces will only be cleaned in emergency full cleanup

    # Skip potentially disruptive DNS operations during regular disconnect
    echo "Skipping DNS operations to prevent network disruption..."
}

cleanup_routes() {
    # Full cleanup including NetworkManager restart for emergency situations
    cleanup_routes_light
}

full_cleanup() {
    echo -e "\033[1;33mPerforming full VPN cleanup...\033[0m"
    log_message "Full cleanup requested"

    # Check for multiple processes before cleanup
    local process_count
    process_count=$(pgrep -f "openvpn.*config" 2>/dev/null | wc -l)

    if [[ $process_count -gt 1 ]]; then
        echo -e "\033[1;31m⚠️  CRITICAL: Found $process_count OpenVPN processes running simultaneously!\033[0m"
        echo -e "\033[1;31m⚠️  This can cause system overheating and high CPU usage!\033[0m"
        echo -e "\033[1;33m   Cleaning up immediately...\033[0m"
    fi

    kill_all_vpn

    echo "Cleaning up temporary files..."
    rm -f /tmp/vpn_*.log /tmp/vpn_*.cache /tmp/vpn_*.lock 2>/dev/null || true

    echo "Resetting network configuration..."
    # Try different init systems
    if command -v sv >/dev/null 2>&1; then
        # Artix Linux with runit
        sudo sv restart NetworkManager 2>/dev/null || true
    elif command -v systemctl >/dev/null 2>&1; then
        # systemd systems
        sudo systemctl restart NetworkManager 2>/dev/null || true
    else
        # Fallback for other init systems
        sudo service NetworkManager restart 2>/dev/null || true
    fi

    echo -e "\033[1;32m✓ Full cleanup completed\033[0m"
    log_message "Full cleanup completed"

    notify-send "VPN Manager" "Full cleanup completed" --icon=dialog-information 2>/dev/null || true
}

case "$1" in
    "status"|"s")
        show_status
        ;;
    "stop"|"disconnect"|"d")
        stop_vpn
        ;;
    "kill-all"|"kill"|"k")
        kill_all_vpn
        ;;
    "cleanup"|"clean"|"c")
        full_cleanup
        ;;
    "health"|"check"|"h")
        check_process_health
        case $? in
            0) echo -e "\033[1;32m✓ Process health: GOOD (1 process running)\033[0m" ;;
            1) echo -e "\033[1;31m✗ Process health: CRITICAL (multiple processes)\033[0m"; exit 1 ;;
            2) echo -e "\033[1;33m○ Process health: NO PROCESSES RUNNING\033[0m" ;;
        esac
        ;;
    *)
        echo "VPN Manager - Process Management"
        echo "Usage: $0 {status|stop|kill-all|cleanup|health}"
        echo ""
        echo "Commands:"
        echo "  status    - Show VPN connection status"
        echo "  stop      - Gracefully stop VPN connection"
        echo "  kill-all  - Force kill all VPN processes"
        echo "  cleanup   - Full cleanup of VPN processes and routes"
        echo "  health    - Check OpenVPN process health"
        exit 1
        ;;
esac
