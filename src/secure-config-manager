#!/bin/bash
# ABOUTME: Secure configuration manager for ProtonVPN service - replaces hardcoded paths
# ABOUTME: FHS-compliant configuration system with validation and security hardening

set -euo pipefail

# FHS-compliant secure paths (NO hardcoded development paths)
readonly CONFIG_DIR="/etc/protonvpn"
readonly LIB_DIR="/usr/local/lib/protonvpn"
readonly BIN_DIR="/usr/local/bin"
readonly VAR_DIR="/var/lib/protonvpn"
readonly LOG_DIR="/var/log/protonvpn"
readonly RUN_DIR="/run/protonvpn"

readonly CONFIG_FILE="$CONFIG_DIR/service.conf"
readonly DEFAULT_CONFIG_FILE="$CONFIG_DIR/service.conf.default"
readonly LOG_FILE="$LOG_DIR/config.log"

# Service configuration
readonly SERVICE_USER="protonvpn"
readonly SERVICE_GROUP="protonvpn"

# Secure logging function
log_config() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

# Load and validate secure configuration
load_secure_config() {
    log_config "INFO" "Loading secure configuration"

    if [[ -f "$CONFIG_FILE" ]]; then
        # Validate configuration file permissions
        local perms=$(stat -c "%a" "$CONFIG_FILE")
        local owner=$(stat -c "%U:%G" "$CONFIG_FILE")

        if [[ "$perms" != "640" ]] || [[ "$owner" != "root:$SERVICE_GROUP" ]]; then
            log_config "ERROR" "Configuration file has insecure permissions: $perms $owner"
            return 1
        fi

        # Source configuration with error handling
        # shellcheck source=/dev/null
        if source "$CONFIG_FILE" 2>/dev/null; then
            log_config "INFO" "Configuration loaded successfully"
        else
            log_config "ERROR" "Failed to load configuration file"
            return 1
        fi
    else
        log_config "WARN" "Configuration file not found, using defaults"
        create_default_config
        load_secure_config
    fi

    # Export validated environment variables
    export VPN_ROOT="$LIB_DIR"
    export VPN_BIN_DIR="$BIN_DIR"
    export VPN_CONFIG_DIR="$CONFIG_DIR"
    export VPN_VAR_DIR="$VAR_DIR"
    export VPN_LOG_DIR="$LOG_DIR"
    export VPN_RUN_DIR="$RUN_DIR"
    export SERVICE_USER
    export SERVICE_GROUP

    # Validate critical paths exist
    validate_installation_paths
}

# Create default secure configuration
create_default_config() {
    log_config "INFO" "Creating default secure configuration"

    # Create configuration directory
    sudo mkdir -p "$CONFIG_DIR"

    # Create default configuration file
    sudo tee "$DEFAULT_CONFIG_FILE" > /dev/null <<EOF
# ProtonVPN Service Configuration - Security Hardened
# DO NOT EDIT - This is the default configuration template

# Service settings
UPDATE_INTERVAL=3600
UPDATE_TIMEOUT=60
SERVICE_USER="protonvpn"
SERVICE_GROUP="protonvpn"

# Security settings
AUDIT_LOGGING=true
SECURE_MODE=true
ENABLE_ENCRYPTION=true

# FHS-compliant paths (DO NOT MODIFY)
VPN_ROOT="$LIB_DIR"
VPN_BIN_DIR="$BIN_DIR"
VPN_CONFIG_DIR="$CONFIG_DIR"
VPN_VAR_DIR="$VAR_DIR"
VPN_LOG_DIR="$LOG_DIR"
VPN_RUN_DIR="$RUN_DIR"

# Database settings
DATABASE_PATH="$VAR_DIR/databases/service-history.db"
BACKUP_RETENTION_DAYS=7
BACKUP_INTERVAL=86400

# Notification settings
NOTIFICATIONS_ENABLED=true
NOTIFICATION_LEVEL="important"

# Health monitoring
HEALTH_CHECK_INTERVAL=300
MEMORY_LIMIT_MB=25
CPU_LIMIT_PERCENT=5

# Network settings
NETWORK_TIMEOUT=30
CONNECTION_RETRY_COUNT=3
EOF

    # Copy default to active configuration
    sudo cp "$DEFAULT_CONFIG_FILE" "$CONFIG_FILE"

    # Set secure permissions
    sudo chown root:"$SERVICE_GROUP" "$CONFIG_FILE" "$DEFAULT_CONFIG_FILE"
    sudo chmod 640 "$CONFIG_FILE" "$DEFAULT_CONFIG_FILE"

    log_config "INFO" "Default configuration created with secure permissions"
}

# Validate configuration integrity
validate_config_integrity() {
    log_config "INFO" "Validating configuration integrity"

    # Check for hardcoded development paths (SECURITY CHECK)
    if grep -q "/home/mqx/workspace" "$CONFIG_FILE" 2>/dev/null; then
        log_config "ERROR" "SECURITY VIOLATION: Hardcoded development paths detected"
        return 1
    fi

    # Validate required settings exist
    local required_vars=(
        "VPN_ROOT" "VPN_BIN_DIR" "SERVICE_USER" "UPDATE_INTERVAL"
    )

    for var in "${required_vars[@]}"; do
        if ! grep -q "^${var}=" "$CONFIG_FILE" 2>/dev/null; then
            log_config "ERROR" "Required configuration missing: $var"
            return 1
        fi
    done

    # Validate numeric settings
    local update_interval
    update_interval=$(grep "^UPDATE_INTERVAL=" "$CONFIG_FILE" | cut -d= -f2 | tr -d '"')

    if [[ ! "$update_interval" =~ ^[0-9]+$ ]] || [[ "$update_interval" -lt 300 ]]; then
        log_config "ERROR" "Invalid UPDATE_INTERVAL: must be numeric >= 300"
        return 1
    fi

    log_config "INFO" "Configuration integrity validated"
    return 0
}

# Validate installation paths exist and are secure
validate_installation_paths() {
    log_config "INFO" "Validating installation paths"

    local required_paths=(
        "$VPN_ROOT" "$VPN_BIN_DIR" "$VPN_CONFIG_DIR"
        "$VPN_VAR_DIR" "$VPN_LOG_DIR" "$VPN_RUN_DIR"
    )

    for path in "${required_paths[@]}"; do
        if [[ ! -d "$path" ]]; then
            log_config "ERROR" "Required path missing: $path"
            return 1
        fi

        # Check ownership and permissions
        local owner
        owner=$(stat -c "%U:%G" "$path")
        if [[ "$owner" != "root:root" ]] && [[ "$owner" != "$SERVICE_USER:$SERVICE_GROUP" ]]; then
            log_config "WARN" "Path has unexpected ownership: $path ($owner)"
        fi
    done

    # Validate critical binaries exist
    local required_binaries=(
        "$VPN_BIN_DIR/download-engine"
        "$VPN_BIN_DIR/proton-auth"
        "$VPN_BIN_DIR/proton-service"
    )

    for binary in "${required_binaries[@]}"; do
        if [[ ! -x "$binary" ]]; then
            log_config "ERROR" "Required binary missing or not executable: $binary"
            return 1
        fi
    done

    log_config "INFO" "Installation paths validated successfully"
    return 0
}

# Create secure directory structure
create_secure_directories() {
    log_config "INFO" "Creating secure directory structure"

    # Create all required directories
    sudo mkdir -p "$CONFIG_DIR" "$LIB_DIR" "$BIN_DIR" "$VAR_DIR" "$LOG_DIR" "$RUN_DIR"
    sudo mkdir -p "$VAR_DIR/databases" "$VAR_DIR/backups" "$VAR_DIR/cache"

    # Set directory ownership and permissions
    sudo chown root:root "$CONFIG_DIR" "$LIB_DIR" "$BIN_DIR"
    sudo chown "$SERVICE_USER:$SERVICE_GROUP" "$VAR_DIR" "$LOG_DIR" "$RUN_DIR"
    sudo chown "$SERVICE_USER:$SERVICE_GROUP" "$VAR_DIR/databases" "$VAR_DIR/backups" "$VAR_DIR/cache"

    # Set secure permissions
    sudo chmod 755 "$CONFIG_DIR" "$LIB_DIR" "$BIN_DIR"
    sudo chmod 750 "$VAR_DIR" "$LOG_DIR" "$RUN_DIR"
    sudo chmod 700 "$VAR_DIR/databases" "$VAR_DIR/backups"
    sudo chmod 755 "$VAR_DIR/cache"

    # Create log file with secure permissions
    sudo touch "$LOG_FILE"
    sudo chown "$SERVICE_USER:$SERVICE_GROUP" "$LOG_FILE"
    sudo chmod 640 "$LOG_FILE"

    log_config "INFO" "Secure directory structure created"
}

# Create service user with minimal privileges
create_service_user() {
    log_config "INFO" "Creating service user: $SERVICE_USER"

    if ! id "$SERVICE_USER" >/dev/null 2>&1; then
        # Create system user with no shell and no home directory
        sudo useradd \
            --system \
            --shell /bin/false \
            --home-dir /var/lib/protonvpn \
            --no-create-home \
            --comment "ProtonVPN Service User" \
            "$SERVICE_USER"

        log_config "INFO" "Service user created: $SERVICE_USER"
    else
        log_config "INFO" "Service user already exists: $SERVICE_USER"
    fi

    # Ensure user has no shell access
    sudo usermod --shell /bin/false "$SERVICE_USER" 2>/dev/null || true
}

# Install/migrate service files
install_service_files() {
    local source_dir="$1"
    log_config "INFO" "Installing service files from: $source_dir"

    # Create service user first
    create_service_user

    # Create secure directories
    create_secure_directories

    # Copy binaries to secure location
    if [[ -d "$source_dir/src" ]]; then
        log_config "INFO" "Installing service binaries"

        # List of binaries to install
        local binaries=(
            "download-engine" "proton-auth" "proton-service"
            "secure-database-manager" "secure-config-manager"
            "vpn-notify" "vpn-logger"
        )

        for binary in "${binaries[@]}"; do
            if [[ -f "$source_dir/src/$binary" ]]; then
                sudo cp "$source_dir/src/$binary" "$BIN_DIR/"
                sudo chown root:root "$BIN_DIR/$binary"
                sudo chmod 755 "$BIN_DIR/$binary"
                log_config "INFO" "Installed binary: $binary"
            else
                log_config "WARN" "Binary not found: $binary"
            fi
        done
    fi

    # Install library files
    if [[ -d "$source_dir" ]]; then
        # Copy entire source directory to lib (excluding sensitive files)
        sudo rsync -av --exclude='*.log' --exclude='*.tmp' --exclude='.git' \
            "$source_dir/" "$LIB_DIR/"

        # Fix ownership and permissions
        sudo chown -R root:root "$LIB_DIR"
        sudo find "$LIB_DIR" -type f -name "*.sh" -exec chmod 755 {} \;
        sudo find "$LIB_DIR" -type f ! -name "*.sh" -exec chmod 644 {} \;
    fi

    log_config "INFO" "Service files installed successfully"
}

# Generate secure systemd service file
generate_systemd_service() {
    local service_file="/etc/systemd/system/protonvpn-updater.service"

    log_config "INFO" "Generating secure systemd service file"

    sudo tee "$service_file" > /dev/null <<EOF
[Unit]
Description=ProtonVPN Config Updater (Security Hardened)
Documentation=https://github.com/maxrantil/protonvpn-manager
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
User=$SERVICE_USER
Group=$SERVICE_GROUP
ExecStart=$BIN_DIR/protonvpn-updater-daemon.sh
Restart=always
RestartSec=30
Environment=PROTONVPN_CONFIG_DIR=$CONFIG_DIR

# Security settings - Maximum hardening
NoNewPrivileges=yes
ProtectSystem=strict
ProtectHome=yes
ReadWritePaths=$VAR_DIR $LOG_DIR $RUN_DIR
PrivateTmp=yes
ProtectKernelTunables=yes
ProtectKernelModules=yes
ProtectControlGroups=yes
RestrictSUIDSGID=yes
RestrictRealtime=yes
RestrictNamespaces=yes
LockPersonality=yes
MemoryDenyWriteExecute=yes
PrivateDevices=yes
ProtectClock=yes
ProtectHostname=yes
RemoveIPC=yes

# Network restrictions
RestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX
SystemCallFilter=@system-service
SystemCallErrorNumber=EPERM
SystemCallArchitectures=native

# Resource limits
LimitNOFILE=512
MemoryLimit=25M
CPUQuota=5%
TasksMax=10

# Logging
StandardOutput=journal
StandardError=journal
SyslogIdentifier=protonvpn-updater

[Install]
WantedBy=multi-user.target
EOF

    sudo chmod 644 "$service_file"
    log_config "INFO" "Systemd service file created: $service_file"
}

# Generate secure runit service
generate_runit_service() {
    local runit_dir="/etc/runit/sv/protonvpn-updater"

    log_config "INFO" "Generating secure runit service"

    # Create runit service directory
    sudo mkdir -p "$runit_dir/log"

    # Create main service script
    sudo tee "$runit_dir/run" > /dev/null <<'EOF'
#!/bin/sh
# ProtonVPN Config Updater - Runit service (Security Hardened)

# Load secure configuration
if [ -f "/usr/local/bin/secure-config-manager" ]; then
    . /usr/local/bin/secure-config-manager
    load_secure_config || exit 1
else
    echo "ERROR: Secure configuration system not found" >&2
    exit 1
fi

# Security validation
if [ "$(id -un)" != "${SERVICE_USER:-protonvpn}" ]; then
    echo "ERROR: Must run as service user: ${SERVICE_USER:-protonvpn}" >&2
    exec chpst -u "${SERVICE_USER:-protonvpn}:${SERVICE_GROUP:-protonvpn}" "$0" "$@"
fi

# Change to secure directory
cd "${VPN_ROOT:-/usr/local/lib/protonvpn}" || exit 1

# Set resource limits
ulimit -f 10240  # 10MB file size limit
ulimit -v 25600  # 25MB virtual memory limit

exec 2>&1
exec "${VPN_BIN_DIR:-/usr/local/bin}/protonvpn-updater-daemon.sh"
EOF

    # Create log service script
    sudo tee "$runit_dir/log/run" > /dev/null <<EOF
#!/bin/sh
exec svlogd -tt "$LOG_DIR"
EOF

    # Set permissions
    sudo chmod 755 "$runit_dir/run" "$runit_dir/log/run"
    sudo chown root:root "$runit_dir/run" "$runit_dir/log/run"

    log_config "INFO" "Runit service created: $runit_dir"
}

# Main command handler
main() {
    local command="${1:-help}"

    case "$command" in
        "install")
            local source_dir="${2:-$(pwd)}"
            install_service_files "$source_dir"
            create_default_config
            generate_systemd_service
            generate_runit_service
            ;;
        "load")
            load_secure_config
            ;;
        "validate")
            validate_config_integrity
            ;;
        "create-dirs")
            create_secure_directories
            ;;
        "create-user")
            create_service_user
            ;;
        "status")
            echo "Configuration file: $CONFIG_FILE"
            echo "Service user: $SERVICE_USER"
            echo "Installation directory: $LIB_DIR"
            if [[ -f "$CONFIG_FILE" ]]; then
                echo "Configuration exists: YES"
                validate_config_integrity && echo "Configuration valid: YES" || echo "Configuration valid: NO"
            else
                echo "Configuration exists: NO"
            fi
            ;;
        "help"|*)
            echo "Usage: $0 {install|load|validate|create-dirs|create-user|status}"
            echo ""
            echo "Commands:"
            echo "  install [source_dir]  - Install service files securely"
            echo "  load                  - Load and validate configuration"
            echo "  validate              - Validate configuration integrity"
            echo "  create-dirs           - Create secure directory structure"
            echo "  create-user           - Create service user"
            echo "  status                - Show configuration status"
            echo "  help                  - Show this help message"
            ;;
    esac
}

# Execute main function
main "$@"
