#!/bin/bash
# ABOUTME: VPN process and connection management script for Artix/Arch Linux
# ABOUTME: Handles OpenVPN process lifecycle, status checking, and cleanup operations

VPN_PID_FILE="/var/run/openvpn.pid"
VPN_LOG_FILE="/tmp/vpn_manager.log"
LOCK_FILE="/tmp/vpn_manager.lock"

log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$VPN_LOG_FILE"
}

get_vpn_pid() {
    local pid_from_file pid_from_process
    
    if [[ -f "$VPN_PID_FILE" ]]; then
        pid_from_file=$(cat "$VPN_PID_FILE" 2>/dev/null)
        if [[ -n "$pid_from_file" ]] && kill -0 "$pid_from_file" 2>/dev/null; then
            echo "$pid_from_file"
            return 0
        fi
    fi
    
    pid_from_process=$(pgrep -f "openvpn.*--config" 2>/dev/null | head -1)
    if [[ -n "$pid_from_process" ]]; then
        echo "$pid_from_process"
        return 0
    fi
    
    return 1
}

is_vpn_running() {
    local pid
    pid=$(get_vpn_pid)
    if [[ -n "$pid" ]] && kill -0 "$pid" 2>/dev/null; then
        return 0
    else
        return 1
    fi
}

get_vpn_interface() {
    ip link show | grep -E "tun[0-9]+" | head -1 | awk '{print $2}' | sed 's/://'
}

get_vpn_gateway() {
    local interface
    interface=$(get_vpn_interface)
    if [[ -n "$interface" ]]; then
        ip route | grep "^0.0.0.0.*$interface" | awk '{print $3}' | head -1
    fi
}

show_status() {
    echo -e "\033[1;36m╔════════════════════════════════════════╗\033[0m"
    echo -e "\033[1;36m║            VPN Status Report           ║\033[0m"
    echo -e "\033[1;36m╚════════════════════════════════════════╝\033[0m"
    echo
    
    if is_vpn_running; then
        local pid interface external_ip
        pid=$(get_vpn_pid)
        interface=$(get_vpn_interface)
        
        echo -e "\033[1;32m✓ VPN Status: CONNECTED\033[0m"
        echo -e "  Process ID: $pid"
        
        if [[ -n "$interface" ]]; then
            echo -e "  Interface: $interface"
            local vpn_ip gateway
            vpn_ip=$(ip addr show "$interface" 2>/dev/null | grep "inet " | awk '{print $2}' | cut -d'/' -f1)
            gateway=$(get_vpn_gateway)
            
            if [[ -n "$vpn_ip" ]]; then
                echo -e "  VPN IP: $vpn_ip"
            fi
            if [[ -n "$gateway" ]]; then
                echo -e "  Gateway: $gateway"
            fi
        fi
        
        echo -n "  External IP: "
        external_ip=$(curl -s --max-time 5 https://ipinfo.io/ip 2>/dev/null || echo "Unable to determine")
        echo "$external_ip"
        
        local uptime
        uptime=$(ps -o etime= -p "$pid" 2>/dev/null | tr -d ' ')
        if [[ -n "$uptime" ]]; then
            echo -e "  Uptime: $uptime"
        fi
        
        notify-send "VPN Status" "Connected - IP: $external_ip" --icon=network-vpn 2>/dev/null || true
    else
        echo -e "\033[1;31m✗ VPN Status: DISCONNECTED\033[0m"
        
        echo -n "  External IP: "
        external_ip=$(curl -s --max-time 5 https://ipinfo.io/ip 2>/dev/null || echo "Unable to determine")
        echo "$external_ip"
        
        if [[ -f "$VPN_PID_FILE" ]]; then
            echo -e "\033[1;33m  Warning: Stale PID file exists\033[0m"
        fi
        
        notify-send "VPN Status" "Disconnected - IP: $external_ip" --icon=network-idle 2>/dev/null || true
    fi
    
    echo
    local active_tunnels
    active_tunnels=$(ip addr show | grep -c "tun[0-9]" 2>/dev/null || echo "0")
    echo -e "  Active tunnels: $active_tunnels"
    
    if [[ -f "$VPN_LOG_FILE" ]]; then
        local log_size
        log_size=$(du -h "$VPN_LOG_FILE" 2>/dev/null | cut -f1)
        echo -e "  Log file size: $log_size"
    fi
}

stop_vpn() {
    echo -e "\033[1;33mStopping VPN connection...\033[0m"
    log_message "VPN stop requested"
    
    if ! is_vpn_running; then
        echo -e "\033[1;33mVPN is not currently running\033[0m"
        cleanup_files
        return 0
    fi
    
    local pid
    pid=$(get_vpn_pid)
    
    if [[ -n "$pid" ]]; then
        echo "Terminating OpenVPN process (PID: $pid)"
        
        if kill -TERM "$pid" 2>/dev/null; then
            local count=0
            while kill -0 "$pid" 2>/dev/null && [[ $count -lt 10 ]]; do
                sleep 1
                ((count++))
            done
            
            if kill -0 "$pid" 2>/dev/null; then
                echo "Process still running, sending KILL signal"
                kill -KILL "$pid" 2>/dev/null
                sleep 2
            fi
        fi
        
        if is_vpn_running; then
            echo -e "\033[1;31mError: Failed to stop VPN process\033[0m"
            log_message "Failed to stop VPN process $pid"
            return 1
        else
            echo -e "\033[1;32m✓ VPN process stopped successfully\033[0m"
            log_message "VPN process $pid stopped successfully"
        fi
    fi
    
    cleanup_files
    cleanup_routes
    
    notify-send "VPN Manager" "VPN disconnected successfully" --icon=network-idle 2>/dev/null || true
    
    pkill -RTMIN+4 dwmblocks 2>/dev/null || true
    
    return 0
}

kill_all_vpn() {
    echo -e "\033[1;33mForce killing all VPN processes...\033[0m"
    log_message "Force kill all VPN processes requested"
    
    local pids
    pids=$(pgrep openvpn 2>/dev/null)
    
    if [[ -z "$pids" ]]; then
        echo -e "\033[1;33mNo VPN processes found\033[0m"
    else
        echo "Killing processes: $pids"
        pkill -KILL openvpn 2>/dev/null
        sleep 2
        
        if pgrep openvpn >/dev/null 2>&1; then
            echo -e "\033[1;31mWarning: Some processes may still be running\033[0m"
        else
            echo -e "\033[1;32m✓ All VPN processes terminated\033[0m"
        fi
    fi
    
    cleanup_files
    cleanup_routes
    
    notify-send "VPN Manager" "All VPN processes killed" --icon=dialog-warning 2>/dev/null || true
}

cleanup_files() {
    [[ -f "$VPN_PID_FILE" ]] && rm -f "$VPN_PID_FILE" 2>/dev/null
    [[ -f "$LOCK_FILE" ]] && rm -f "$LOCK_FILE" 2>/dev/null
    [[ -f "/tmp/vpn_connect.lock" ]] && rm -f "/tmp/vpn_connect.lock" 2>/dev/null
}

cleanup_routes() {
    local interfaces
    interfaces=$(ip addr show | grep -E "tun[0-9]+" | awk '{print $2}' | sed 's/:$//')
    
    if [[ -n "$interfaces" ]]; then
        echo "Cleaning up tunnel interfaces..."
        while IFS= read -r interface; do
            if [[ -n "$interface" ]]; then
                echo "  Removing interface: $interface"
                sudo ip link set "$interface" down 2>/dev/null || true
                sudo ip link delete "$interface" 2>/dev/null || true
            fi
        done <<< "$interfaces"
    fi
    
    echo "Flushing DNS cache..."
    sudo resolvconf -u 2>/dev/null || true
}

full_cleanup() {
    echo -e "\033[1;33mPerforming full VPN cleanup...\033[0m"
    log_message "Full cleanup requested"
    
    kill_all_vpn
    
    echo "Cleaning up temporary files..."
    rm -f /tmp/vpn_*.log /tmp/vpn_*.cache /tmp/vpn_*.lock 2>/dev/null || true
    
    echo "Resetting network configuration..."
    sudo systemctl restart NetworkManager 2>/dev/null || true
    
    echo -e "\033[1;32m✓ Full cleanup completed\033[0m"
    log_message "Full cleanup completed"
    
    notify-send "VPN Manager" "Full cleanup completed" --icon=dialog-information 2>/dev/null || true
}

case "$1" in
    "status"|"s")
        show_status
        ;;
    "stop"|"disconnect"|"d")
        stop_vpn
        ;;
    "kill-all"|"kill"|"k")
        kill_all_vpn
        ;;
    "cleanup"|"clean"|"c")
        full_cleanup
        ;;
    *)
        echo "VPN Manager - Process Management"
        echo "Usage: $0 {status|stop|kill-all|cleanup}"
        echo ""
        echo "Commands:"
        echo "  status    - Show VPN connection status"
        echo "  stop      - Gracefully stop VPN connection"
        echo "  kill-all  - Force kill all VPN processes"
        echo "  cleanup   - Full cleanup of VPN processes and routes"
        exit 1
        ;;
esac