# ABOUTME: Pre-commit hooks configuration for VPN manager project
# ABOUTME: Ensures code quality and consistency before commits

repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: ['--maxkb=500']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable

  # Shell script linting and formatting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: ['-e', 'SC1091', '-e', 'SC2034', '-e', 'SC2155', '-e', 'SC2016', '-e', 'SC2001', '-e', 'SC2126']
        types: [shell]

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        args: ['--disable', 'MD013', '--disable', 'MD041']

  # File permissions and security checks
  - repo: local
    hooks:
      - id: check-credentials
        name: Check for credentials in files
        entry: bash -c 'if grep -r --include="*.sh" --include="*.bash" --include="*.txt" -i "password.*=" --exclude-dir=tests .; then echo "Potential credentials found!"; exit 1; fi'
        language: system
        pass_filenames: false

      - id: executable-scripts
        name: Ensure scripts are executable
        entry: bash -c 'for script in vpn vpn-manager vpn-connector tests/*.sh; do if [ -f "$script" ] && [ ! -x "$script" ]; then chmod +x "$script"; fi; done'
        language: system
        pass_filenames: false

      - id: unit-tests
        name: Run unit tests
        entry: bash -c 'cd tests && ./run_tests.sh --unit-only'
        language: system
        pass_filenames: false
        stages: [pre-push]

      - id: integration-tests
        name: Run integration tests
        entry: bash -c 'cd tests && ./run_tests.sh --integration-only'
        language: system
        pass_filenames: false
        stages: [pre-push]

      - id: shell-syntax-check
        name: Shell syntax validation
        entry: bash -c 'for script in vpn vpn-manager vpn-connector tests/*.sh; do if [ -f "$script" ]; then bash -n "$script" || exit 1; fi; done'
        language: system
        pass_filenames: false

      - id: test-framework-validation
        name: Validate test framework
        entry: bash -c 'if [ -f "tests/test_framework.sh" ]; then bash -n tests/test_framework.sh || exit 1; fi'
        language: system
        pass_filenames: false

      - id: no-ai-attribution
        name: Block AI/Agent Attribution in Commits
        entry: bash -c 'if git diff --cached --diff-filter=ACMR -- ":(exclude).github/" ":(exclude)tests/test_github_workflows.sh" ":(exclude)tests/test_github_workflows_extended.sh" ":(exclude)config/.pre-commit-config.yaml" ":(exclude).gitignore" ":(exclude)docs/" ":(exclude)SESSION_HANDOFF.md" ":(exclude)*HANDOFF*.md" ":(exclude)*SESSION*.md" | grep "^+" | grep -iE "(Co-authored-by|Generated with|Claude|AI-generated|Created by Claude|(reviewed by|validated by|approved by|checked by).*(agent|architecture-designer|security-validator|performance-optimizer)|agent (review|validation|approval))"; then echo "❌ ERROR Remove AI/agent attribution from commits (per CLAUDE.md)"; exit 1; fi'
        language: system
        stages: [pre-commit]

      - id: conventional-commit-msg
        name: Enforce Conventional Commit Format
        entry: python3 -c
        language: system
        stages: [commit-msg]
        args:
          - |
            import sys, re
            with open(sys.argv[1]) as f:
                msg = f.read().strip()
            pattern = r'^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?!?: .+'
            if not re.match(pattern, msg):
                print('❌ ERROR: Use conventional commit format')
                print('Examples:')
                print('  feat(vpn): add new connection method')
                print('  fix(config): resolve parsing issue')
                print('  docs: update README')
                sys.exit(1)
