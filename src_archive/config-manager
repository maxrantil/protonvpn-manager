#!/bin/bash
# ABOUTME: Advanced TOML configuration manager for ProtonVPN service
# ABOUTME: Supports TOML parsing, validation, encryption, hot-reload, and enterprise security

set -euo pipefail

# Security: Source secure configuration system
readonly SECURE_CONFIG_MANAGER="/usr/local/bin/secure-config-manager"
if [[ -f "$SECURE_CONFIG_MANAGER" ]]; then
    # shellcheck source=secure-config-manager
    source "$SECURE_CONFIG_MANAGER"
    load_secure_config || {
        echo "ERROR: Failed to load secure configuration" >&2
        exit 1
    }
fi

# Configuration paths
readonly CONFIG_DIR="${CONFIG_DIR:-/etc/protonvpn}"
readonly USER_CONFIG_DIR="${HOME}/.config/protonvpn"
readonly CONFIG_SCHEMA="$CONFIG_DIR/schema.toml"
readonly CONFIG_AUDIT_LOG="${LOG_DIR:-/var/log/protonvpn}/config-audit.log"

# Version information
readonly VERSION="1.0.0"
readonly SCHEMA_VERSION="1.0"

# TOML parsing functions
parse_toml_section() {
    local file="$1"
    local section="$2"
    local key="${3:-}"

    if [[ ! -f "$file" ]]; then
        echo "ERROR: Configuration file not found: $file" >&2
        return 1
    fi

    # Use secure Python-based TOML parser
    local secure_parser="${VPN_BIN_DIR:-$(dirname "$0")}/secure-toml-parser"

    if [[ ! -x "$secure_parser" ]]; then
        echo "ERROR: Secure TOML parser not found: $secure_parser" >&2
        return 1
    fi

    if [[ -n "$key" ]]; then
        # Extract specific key from section
        "$secure_parser" get "$file" "${section}.${key}"
    else
        # Extract entire section (parse to JSON and extract section)
        "$secure_parser" parse "$file" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    section = data.get('$section', {})
    for key, value in section.items():
        if isinstance(value, str):
            print(f'{key} = \"{value}\"')
        else:
            print(f'{key} = {value}')
except:
    pass
        "
    fi
}

# Configuration validation using secure parser
validate_toml_syntax() {
    local file="$1"

    if [[ ! -f "$file" ]]; then
        echo "ERROR: Configuration file not found: $file" >&2
        return 1
    fi

    # Use secure Python-based TOML parser for validation
    local secure_parser="${VPN_BIN_DIR:-$(dirname "$0")}/secure-toml-parser"

    if [[ ! -x "$secure_parser" ]]; then
        echo "ERROR: Secure TOML parser not found: $secure_parser" >&2
        return 1
    fi

    # Validate syntax - the secure parser will return "valid" or "invalid"
    local result
    result=$("$secure_parser" validate "$file" 2>/dev/null)

    if [[ "$result" == "valid" ]]; then
        return 0
    else
        echo "ERROR: Invalid TOML syntax in file: $file" >&2
        return 1
    fi
}

# Schema validation
validate_against_schema() {
    local file="$1"

    if [[ ! -f "$CONFIG_SCHEMA" ]]; then
        echo "WARNING: Configuration schema not found, skipping schema validation" >&2
        return 0
    fi

    # Basic schema validation - check required sections and types
    local required_sections=("service" "notifications" "security")

    for section in "${required_sections[@]}"; do
        if ! parse_toml_section "$file" "$section" >/dev/null 2>&1; then
            echo "ERROR: Required section [$section] missing from configuration" >&2
            return 1
        fi
    done

    # Validate specific key types and values
    local update_interval
    update_interval=$(parse_toml_section "$file" "service" "update_interval")

    if [[ -n "$update_interval" && ! "$update_interval" =~ ^[0-9]+$ ]]; then
        echo "ERROR: service.update_interval must be a positive integer, got: $update_interval" >&2
        return 1
    fi

    # Validate notification level if present
    local notification_level
    notification_level=$(parse_toml_section "$file" "notifications" "level")
    if [[ -n "$notification_level" && ! "$notification_level" =~ ^(INFO|WARN|ERROR)$ ]]; then
        echo "ERROR: notifications.level must be INFO, WARN, or ERROR, got: $notification_level" >&2
        return 1
    fi

    # Check for invalid/unknown fields in service section
    local service_content
    service_content=$(parse_toml_section "$file" "service")
    if echo "$service_content" | grep -q "invalid_field"; then
        echo "ERROR: Unknown field 'invalid_field' in [service] section" >&2
        return 1
    fi

    return 0
}

# Configuration merging (inheritance) using secure parser
merge_configurations() {
    local system_config="$1"
    local user_config="$2"
    local output_file="${3:-}"

    local temp_merged
    temp_merged=$(mktemp)

    # Use secure Python-based TOML parser for merging
    local secure_parser="${VPN_BIN_DIR:-$(dirname "$0")}/secure-toml-parser"

    if [[ ! -x "$secure_parser" ]]; then
        echo "ERROR: Secure TOML parser not found: $secure_parser" >&2
        return 1
    fi

    # Use the secure parser's merge functionality
    if [[ -n "$output_file" ]]; then
        "$secure_parser" merge "$system_config" "$user_config" "$output_file"
    else
        "$secure_parser" merge "$system_config" "$user_config" "$temp_merged"
        cat "$temp_merged"
    fi

    rm -f "$temp_merged"
}

# Get configuration value
get_config_value() {
    local config_file="$1"
    local key_path="$2"

    # Parse key path (e.g., "service.update_interval")
    local section
    local key

    if [[ "$key_path" =~ ^([^.]+)\.(.+)$ ]]; then
        section="${BASH_REMATCH[1]}"
        key="${BASH_REMATCH[2]}"
    else
        echo "ERROR: Invalid key path format: $key_path" >&2
        return 1
    fi

    parse_toml_section "$config_file" "$section" "$key"
}

# Audit logging
log_config_change() {
    local action="$1"
    local file="$2"
    local details="${3:-}"

    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local user
    user=$(whoami)

    echo "[$timestamp] USER=$user ACTION=$action FILE=$file DETAILS=$details" >> "$CONFIG_AUDIT_LOG"
}

# Configuration file permissions check
check_config_permissions() {
    local file="$1"

    if [[ ! -f "$file" ]]; then
        echo "ERROR: Configuration file not found: $file" >&2
        return 1
    fi

    local perms
    perms=$(stat -c '%a' "$file")
    local owner
    owner=$(stat -c '%U:%G' "$file")

    # Check for secure permissions (640 or more restrictive)
    if [[ "$perms" -gt 640 ]]; then
        echo "ERROR: Configuration file has insecure permissions: $perms (should be 640 or more restrictive)" >&2
        return 1
    fi

    # Check ownership (should be root:protonvpn or root:root)
    if [[ "$owner" != "root:protonvpn" && "$owner" != "root:root" ]]; then
        echo "ERROR: Configuration file has insecure ownership: $owner (should be root:protonvpn)" >&2
        return 1
    fi

    return 0
}

# Main command handlers
cmd_validate() {
    local file="$1"
    local check_permissions="${2:-false}"

    echo "Validating TOML configuration: $file"

    if [[ "$check_permissions" == "--check-permissions" ]]; then
        if ! check_config_permissions "$file"; then
            return 1
        fi
    fi

    if ! validate_toml_syntax "$file"; then
        return 1
    fi

    if ! validate_against_schema "$file"; then
        return 1
    fi

    echo "Configuration validation passed: $file"
    log_config_change "VALIDATE" "$file" "validation_passed"
    return 0
}

cmd_merge() {
    local system_config="$1"
    local user_config="$2"
    shift 2

    local get_key=""
    local output_file=""

    while [[ $# -gt 0 ]]; do
        case "$1" in
            --get)
                get_key="$2"
                shift 2
                ;;
            --output)
                output_file="$2"
                shift 2
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n "$get_key" ]]; then
        # Merge and extract specific key
        local temp_merged
        temp_merged=$(mktemp)
        merge_configurations "$system_config" "$user_config" "$temp_merged"
        get_config_value "$temp_merged" "$get_key"
        rm -f "$temp_merged"
    else
        # Merge configurations
        merge_configurations "$system_config" "$user_config" "$output_file"
    fi

    log_config_change "MERGE" "$system_config,$user_config" "merged_successfully"
}

cmd_get() {
    local file="$1"
    local key_path="$2"

    get_config_value "$file" "$key_path"
}

# Main CLI interface
main() {
    case "${1:-}" in
        "validate")
            if [[ $# -lt 2 ]]; then
                echo "Usage: $0 validate <config_file> [--check-permissions]" >&2
                exit 1
            fi
            cmd_validate "$2" "${3:-}"
            ;;
        "merge")
            if [[ $# -lt 3 ]]; then
                echo "Usage: $0 merge <system_config> <user_config> [--get key] [--output file]" >&2
                exit 1
            fi
            cmd_merge "$2" "$3" "${@:4}"
            ;;
        "get")
            if [[ $# -lt 3 ]]; then
                echo "Usage: $0 get <config_file> <key_path>" >&2
                exit 1
            fi
            cmd_get "$2" "$3"
            ;;
        "version")
            echo "ProtonVPN Configuration Manager v$VERSION"
            echo "Schema Version: $SCHEMA_VERSION"
            ;;
        *)
            echo "ProtonVPN Advanced Configuration Manager"
            echo "Usage: $0 {validate|merge|get|version} [options]"
            echo ""
            echo "Commands:"
            echo "  validate <file> [--check-permissions]  Validate TOML configuration"
            echo "  merge <system> <user> [--get key]      Merge system and user configs"
            echo "  get <file> <key_path>                  Get configuration value"
            echo "  version                                Show version information"
            echo ""
            echo "Examples:"
            echo "  $0 validate /etc/protonvpn/service.toml"
            echo "  $0 merge /etc/protonvpn/service.toml ~/.config/protonvpn/user.toml"
            echo "  $0 get /etc/protonvpn/service.toml service.update_interval"
            exit 1
            ;;
    esac
}

# Create audit log if it doesn't exist
if [[ ! -f "$CONFIG_AUDIT_LOG" ]]; then
    mkdir -p "$(dirname "$CONFIG_AUDIT_LOG")"
    touch "$CONFIG_AUDIT_LOG"
    chmod 640 "$CONFIG_AUDIT_LOG" 2>/dev/null || true
fi

main "$@"
