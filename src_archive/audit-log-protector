#!/bin/bash
# ABOUTME: Audit log integrity protection system for ProtonVPN configuration management
# ABOUTME: Adds cryptographic checksums and tamper detection to audit logs

set -euo pipefail

readonly AUDIT_LOG="/var/log/protonvpn/config-audit.log"
readonly CHECKSUM_FILE="${AUDIT_LOG}.checksums"
readonly LOCK_FILE="${AUDIT_LOG}.lock"

# Generate secure checksum for a log entry
generate_entry_checksum() {
    local entry="$1"
    local timestamp="$2"

    # Use SHA-256 with timestamp and entry content for integrity
    echo -n "${timestamp}:${entry}" | sha256sum | cut -d' ' -f1
}

# Add integrity protection to new log entry
protect_log_entry() {
    local entry="$1"
    local timestamp="${2:-$(date '+%Y-%m-%d %H:%M:%S')}"

    # Generate checksum for this entry
    local checksum
    checksum=$(generate_entry_checksum "$entry" "$timestamp")

    # Lock file to prevent concurrent modifications
    exec 200>"$LOCK_FILE"
    flock 200

    # Add entry to audit log
    echo "$entry" >> "$AUDIT_LOG"

    # Add checksum to checksum file
    echo "${timestamp}:${checksum}" >> "$CHECKSUM_FILE"

    # Release lock
    flock -u 200
    exec 200>&-
}

# Verify integrity of entire audit log
verify_log_integrity() {
    if [[ ! -f "$AUDIT_LOG" ]]; then
        echo "ERROR: Audit log not found: $AUDIT_LOG" >&2
        return 1
    fi

    if [[ ! -f "$CHECKSUM_FILE" ]]; then
        echo "WARNING: Checksum file not found: $CHECKSUM_FILE" >&2
        echo "Audit log integrity cannot be verified"
        return 1
    fi

    local line_num=0
    local errors=0

    # Read audit log and checksum file in parallel
    while IFS= read -r log_entry && IFS= read -r checksum_entry <&3; do
        ((line_num++))

        # Extract timestamp and checksum
        local timestamp checksum expected_checksum
        timestamp=$(echo "$checksum_entry" | cut -d':' -f1-2)
        checksum=$(echo "$checksum_entry" | cut -d':' -f3)

        # Generate expected checksum
        expected_checksum=$(generate_entry_checksum "$log_entry" "$timestamp")

        # Compare checksums
        if [[ "$checksum" != "$expected_checksum" ]]; then
            echo "ERROR: Integrity violation at line $line_num" >&2
            echo "  Entry: $log_entry" >&2
            echo "  Expected: $expected_checksum" >&2
            echo "  Found: $checksum" >&2
            ((errors++))
        fi
    done < "$AUDIT_LOG" 3< "$CHECKSUM_FILE"

    if [[ $errors -eq 0 ]]; then
        echo "Audit log integrity verified: $AUDIT_LOG"
        return 0
    else
        echo "ERROR: Found $errors integrity violations in audit log" >&2
        return 1
    fi
}

# Secure log rotation with integrity preservation
rotate_audit_log() {
    local backup_suffix="${1:-$(date '+%Y%m%d_%H%M%S')}"

    # Lock file during rotation
    exec 200>"$LOCK_FILE"
    flock 200

    # Verify integrity before rotation
    if ! verify_log_integrity >/dev/null 2>&1; then
        echo "WARNING: Cannot rotate log with integrity violations" >&2
        flock -u 200
        exec 200>&-
        return 1
    fi

    # Create backup with integrity signature
    cp "$AUDIT_LOG" "${AUDIT_LOG}.${backup_suffix}"
    cp "$CHECKSUM_FILE" "${CHECKSUM_FILE}.${backup_suffix}"

    # Create integrity seal for backup
    cat "$AUDIT_LOG" "$CHECKSUM_FILE" | sha256sum | cut -d' ' -f1 > "${AUDIT_LOG}.${backup_suffix}.seal"

    # Clear current log files
    true > "$AUDIT_LOG"
    true > "$CHECKSUM_FILE"

    # Log rotation event
    local rotation_entry="[$(date '+%Y-%m-%d %H:%M:%S')] SYSTEM=audit-protector ACTION=ROTATE BACKUP=${backup_suffix} STATUS=success"
    protect_log_entry "$rotation_entry"

    # Release lock
    flock -u 200
    exec 200>&-

    echo "Audit log rotated successfully: backup suffix $backup_suffix"
}

# Initialize audit log protection
initialize_protection() {
    # Create checksum file if it doesn't exist
    if [[ ! -f "$CHECKSUM_FILE" ]]; then
        touch "$CHECKSUM_FILE"
        chmod 640 "$CHECKSUM_FILE"
    fi

    # Set proper permissions
    chmod 640 "$AUDIT_LOG" 2>/dev/null || true
    chmod 640 "$CHECKSUM_FILE" 2>/dev/null || true

    # Create initial protection entry
    local init_entry="[$(date '+%Y-%m-%d %H:%M:%S')] SYSTEM=audit-protector ACTION=INITIALIZE STATUS=success"
    protect_log_entry "$init_entry"

    echo "Audit log protection initialized"
}

# Command-line interface
case "${1:-help}" in
    "protect")
        if [[ $# -lt 2 ]]; then
            echo "Usage: $0 protect <log_entry>" >&2
            exit 1
        fi
        protect_log_entry "${2}"
        ;;
    "verify")
        verify_log_integrity
        ;;
    "rotate")
        rotate_audit_log "${2:-}"
        ;;
    "init")
        initialize_protection
        ;;
    "help"|*)
        echo "Audit Log Integrity Protection System"
        echo "Usage: $0 <command> [options]"
        echo ""
        echo "Commands:"
        echo "  protect <entry>    Add protected log entry"
        echo "  verify             Verify log integrity"
        echo "  rotate [suffix]    Rotate log with integrity preservation"
        echo "  init               Initialize protection system"
        echo ""
        echo "Environment:"
        echo "  AUDIT_LOG=/var/log/protonvpn/config-audit.log"
        exit 0
        ;;
esac
